/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
    merchants: MerchantAuthOperations;
  };
  collections: {
    users: User;
    media: Media;
    merchants: Merchant;
    branches: Branch;
    categories: Category;
    plates: Plate;
    sizes: Size;
    garnishes: Garnish;
    'garnish-groups': GarnishGroup;
    orders: Order;
    links: Link;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    merchants: MerchantsSelect<false> | MerchantsSelect<true>;
    branches: BranchesSelect<false> | BranchesSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    plates: PlatesSelect<false> | PlatesSelect<true>;
    sizes: SizesSelect<false> | SizesSelect<true>;
    garnishes: GarnishesSelect<false> | GarnishesSelect<true>;
    'garnish-groups': GarnishGroupsSelect<false> | GarnishGroupsSelect<true>;
    orders: OrdersSelect<false> | OrdersSelect<true>;
    links: LinksSelect<false> | LinksSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user:
    | (User & {
        collection: 'users';
      })
    | (Merchant & {
        collection: 'merchants';
      });
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
export interface MerchantAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "merchants".
 */
export interface Merchant {
  id: string;
  name: string;
  slug: string;
  phone?: string | null;
  address?: string | null;
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "branches".
 */
export interface Branch {
  id: string;
  alias: string;
  address: string;
  isActive?: boolean | null;
  comercio: string | Merchant;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  name: string;
  showName?: string | null;
  description?: string | null;
  isActive?: boolean | null;
  catOrder?: number | null;
  hasIndicators?: boolean | null;
  visibleInMenu?: boolean | null;
  branch: string | Branch;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "plates".
 */
export interface Plate {
  id: string;
  name: string;
  showName?: string | null;
  description?: string | null;
  isActive?: boolean | null;
  isVisibleInMenu?: boolean | null;
  platOrder?: number | null;
  withImage?: boolean | null;
  hasIndicators?: boolean | null;
  category: string | Category;
  imageURL?: string | null;
  fileName?: string | null;
  price: number;
  sizes?: (string | Size)[] | null;
  garnishGroups?: (string | GarnishGroup)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sizes".
 */
export interface Size {
  id: string;
  isVisibleInMenu?: boolean | null;
  name: string;
  price: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "garnish-groups".
 */
export interface GarnishGroup {
  id: string;
  name: string;
  description?: string | null;
  mandatory?: boolean | null;
  maxQuantity?: number | null;
  minQuantity?: number | null;
  multipleSelection?: boolean | null;
  garnishes?: (string | Garnish)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "garnishes".
 */
export interface Garnish {
  id: string;
  name: string;
  description?: string | null;
  price: number;
  image?: (string | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders".
 */
export interface Order {
  id: string;
  orderNumber?: string | null;
  customer: {
    name: string;
    email: string;
    phone: string;
    address: string;
  };
  items?:
    | {
        plate: string | Plate;
        size?: (string | null) | Size;
        garnishes?: (string | Garnish)[] | null;
        quantity: number;
        price: number;
        totalPrice?: number | null;
        observations?: string | null;
        id?: string | null;
      }[]
    | null;
  status?: ('pending' | 'confirmed' | 'preparing' | 'ready' | 'delivered' | 'cancelled') | null;
  paymentMethod: 'cash' | 'bank-transfer' | 'credit-card';
  orderDate?: string | null;
  notes?: string | null;
  totalAmount?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "links".
 */
export interface Link {
  id: string;
  nombre: string;
  url: string;
  descripcion?: string | null;
  icono?: (string | null) | Media;
  merchant: string | Merchant;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'merchants';
        value: string | Merchant;
      } | null)
    | ({
        relationTo: 'branches';
        value: string | Branch;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'plates';
        value: string | Plate;
      } | null)
    | ({
        relationTo: 'sizes';
        value: string | Size;
      } | null)
    | ({
        relationTo: 'garnishes';
        value: string | Garnish;
      } | null)
    | ({
        relationTo: 'garnish-groups';
        value: string | GarnishGroup;
      } | null)
    | ({
        relationTo: 'orders';
        value: string | Order;
      } | null)
    | ({
        relationTo: 'links';
        value: string | Link;
      } | null);
  globalSlug?: string | null;
  user:
    | {
        relationTo: 'users';
        value: string | User;
      }
    | {
        relationTo: 'merchants';
        value: string | Merchant;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user:
    | {
        relationTo: 'users';
        value: string | User;
      }
    | {
        relationTo: 'merchants';
        value: string | Merchant;
      };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "merchants_select".
 */
export interface MerchantsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  phone?: T;
  address?: T;
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "branches_select".
 */
export interface BranchesSelect<T extends boolean = true> {
  alias?: T;
  address?: T;
  isActive?: T;
  comercio?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  name?: T;
  showName?: T;
  description?: T;
  isActive?: T;
  catOrder?: T;
  hasIndicators?: T;
  visibleInMenu?: T;
  branch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "plates_select".
 */
export interface PlatesSelect<T extends boolean = true> {
  name?: T;
  showName?: T;
  description?: T;
  isActive?: T;
  isVisibleInMenu?: T;
  platOrder?: T;
  withImage?: T;
  hasIndicators?: T;
  category?: T;
  imageURL?: T;
  fileName?: T;
  price?: T;
  sizes?: T;
  garnishGroups?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sizes_select".
 */
export interface SizesSelect<T extends boolean = true> {
  isVisibleInMenu?: T;
  name?: T;
  price?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "garnishes_select".
 */
export interface GarnishesSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  price?: T;
  image?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "garnish-groups_select".
 */
export interface GarnishGroupsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  mandatory?: T;
  maxQuantity?: T;
  minQuantity?: T;
  multipleSelection?: T;
  garnishes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders_select".
 */
export interface OrdersSelect<T extends boolean = true> {
  orderNumber?: T;
  customer?:
    | T
    | {
        name?: T;
        email?: T;
        phone?: T;
        address?: T;
      };
  items?:
    | T
    | {
        plate?: T;
        size?: T;
        garnishes?: T;
        quantity?: T;
        price?: T;
        totalPrice?: T;
        observations?: T;
        id?: T;
      };
  status?: T;
  paymentMethod?: T;
  orderDate?: T;
  notes?: T;
  totalAmount?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "links_select".
 */
export interface LinksSelect<T extends boolean = true> {
  nombre?: T;
  url?: T;
  descripcion?: T;
  icono?: T;
  merchant?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}